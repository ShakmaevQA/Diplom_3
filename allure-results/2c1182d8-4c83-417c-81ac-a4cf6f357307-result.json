{"name": "Total orders count increases after new order", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_orders.TestOrders object at 0x105668490>, browser = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"38023fbb-97b4-431c-96f4-3f4b62a96ef4\")>\ngenerate_user = ({'email': 'judithlozano@example.com', 'name': 'Heather Jones', 'password': '%1T%7IJ9ox'}, {'accessToken': 'Bearer eyJ...6090e5da04dabd4a301405', 'success': True, 'user': {'email': 'judithlozano@example.com', 'name': 'Heather Jones'}}, 200)\n\n    @allure.title('Total orders count increases after new order')\n    def test_total_orders_count(self, browser, generate_user):\n        orders = OrdersPage(browser)\n    \n        # Sign in and get initial count\n        try:\n            orders.sign_in(generate_user)\n        except ValueError:\n            pytest.skip(\"Skipping test due to failed user creation\")\n        orders.click_orders_feed()\n        total_orders = int(orders.get_total_orders())\n        print(f\"Initial total orders: {total_orders}\")  # For debugging\n    \n        # Create an order\n        orders.click_builder()\n        orders.wait_burger_area()\n        orders.move_ingredient_to_burger()\n        orders.click_place_order()\n        orders.close_order_modal()\n    \n        # Get new count\n        orders.click_orders_feed()\n>       WebDriverWait(browser, 15).until(\n            lambda driver: int(orders.get_total_orders()) > total_orders\n        )\n\ntests/test_orders.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"38023fbb-97b4-431c-96f4-3f4b62a96ef4\")>\nmethod = <function TestOrders.test_total_orders_count.<locals>.<lambda> at 0x1056de660>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException"}, "steps": [{"name": "Sign in to account", "status": "passed", "parameters": [{"name": "user_data", "value": "({'email': 'judithlozano@example.com', 'password': '%1T%7IJ9ox', 'name': 'Heather Jones'}, {'success': True, 'user': {'email': 'judithlozano@example.com', 'name': 'Heather Jones'}, 'accessToken': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDgyNmE2OWVkMjgwMDAxYjVkMjI4MSIsImlhdCI6MTc0NTM2NDY0NiwiZXhwIjoxNzQ1MzY1ODQ2fQ.w5BrbTORH7G0mo5ehxJhjFgx0uSfp_CfM4EM6NI7JvU', 'refreshToken': 'b44fbb2abfaaa93735414e93477ffcb0d857f66d84b7f5826cc62878f96090e5da04dabd4a301405'}, 200)"}], "start": 1745364646448, "stop": 1745364648997}, {"name": "Click orders feed link", "status": "passed", "start": 1745364648998, "stop": 1745364649228}, {"name": "Get total orders count", "status": "passed", "start": 1745364649228, "stop": 1745364650273}, {"name": "Click builder link", "status": "passed", "start": 1745364650273, "stop": 1745364650502}, {"name": "Wait for burger area", "status": "passed", "start": 1745364650502, "stop": 1745364650511}, {"name": "Drag ingredient to burger area", "status": "passed", "start": 1745364650511, "stop": 1745364652051}, {"name": "Click place order button", "status": "passed", "start": 1745364652052, "stop": 1745364654297}, {"name": "Close order modal", "status": "passed", "start": 1745364654298, "stop": 1745364655525}, {"name": "Click orders feed link", "status": "passed", "start": 1745364655526, "stop": 1745364655762}, {"name": "Get total orders count", "status": "passed", "start": 1745364655762, "stop": 1745364656801}, {"name": "Get total orders count", "status": "passed", "start": 1745364657306, "stop": 1745364657326}, {"name": "Get total orders count", "status": "passed", "start": 1745364657831, "stop": 1745364657848}, {"name": "Get total orders count", "status": "passed", "start": 1745364658353, "stop": 1745364658376}, {"name": "Get total orders count", "status": "passed", "start": 1745364658881, "stop": 1745364658900}, {"name": "Get total orders count", "status": "passed", "start": 1745364659402, "stop": 1745364659422}, {"name": "Get total orders count", "status": "passed", "start": 1745364659926, "stop": 1745364659945}, {"name": "Get total orders count", "status": "passed", "start": 1745364660451, "stop": 1745364660472}, {"name": "Get total orders count", "status": "passed", "start": 1745364660976, "stop": 1745364660995}, {"name": "Get total orders count", "status": "passed", "start": 1745364661500, "stop": 1745364661516}, {"name": "Get total orders count", "status": "passed", "start": 1745364662022, "stop": 1745364662043}, {"name": "Get total orders count", "status": "passed", "start": 1745364662548, "stop": 1745364662572}, {"name": "Get total orders count", "status": "passed", "start": 1745364663077, "stop": 1745364663099}, {"name": "Get total orders count", "status": "passed", "start": 1745364663600, "stop": 1745364663621}, {"name": "Get total orders count", "status": "passed", "start": 1745364664127, "stop": 1745364664148}, {"name": "Get total orders count", "status": "passed", "start": 1745364664653, "stop": 1745364664679}, {"name": "Get total orders count", "status": "passed", "start": 1745364665185, "stop": 1745364665207}, {"name": "Get total orders count", "status": "passed", "start": 1745364665712, "stop": 1745364665733}, {"name": "Get total orders count", "status": "passed", "start": 1745364666239, "stop": 1745364666256}, {"name": "Get total orders count", "status": "passed", "start": 1745364666762, "stop": 1745364666784}, {"name": "Get total orders count", "status": "passed", "start": 1745364667288, "stop": 1745364667306}, {"name": "Get total orders count", "status": "passed", "start": 1745364667812, "stop": 1745364667835}, {"name": "Get total orders count", "status": "passed", "start": 1745364668340, "stop": 1745364668363}, {"name": "Get total orders count", "status": "passed", "start": 1745364668868, "stop": 1745364668881}, {"name": "Get total orders count", "status": "passed", "start": 1745364669385, "stop": 1745364669402}, {"name": "Get total orders count", "status": "passed", "start": 1745364669907, "stop": 1745364669920}, {"name": "Get total orders count", "status": "passed", "start": 1745364670425, "stop": 1745364670448}, {"name": "Get total orders count", "status": "passed", "start": 1745364670954, "stop": 1745364670977}], "attachments": [{"name": "stdout", "source": "24665e16-cefb-4777-9129-31381dcb7481-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "browser", "value": "'firefox'"}], "start": 1745364646447, "stop": 1745364670977, "uuid": "0393cbae-6059-4352-bbd8-e0b1c2dff3f2", "historyId": "4bb57cdd1e403a68f409cf4875bd5594", "testCaseId": "80626cfec4c40c41daf4dfa6db2d8690", "fullName": "tests.test_orders.TestOrders#test_total_orders_count", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_orders"}, {"name": "subSuite", "value": "TestOrders"}, {"name": "host", "value": "MacBook-Air-Administrator.local"}, {"name": "thread", "value": "99073-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_orders"}]}